function mapKeys(e,r){if(Array.isArray(e))return e.map((e=>mapKeys(e,r)));if("object"==typeof e&&null!==e){const n={};for(const t in e){const a=r.find((e=>e.Key===t))?.Value;a?n[a]=mapKeys(e[t],r):n[t]=mapKeys(e[t],r)}return n}return e}function readFile(e){return new Promise(((r,n)=>{const t=new FileReader;t.onload=e=>r(e.target.result),t.onerror=e=>n(e),t.readAsArrayBuffer(e)}))}const Buffer=require("buffer").Buffer,LZ4=require("lz4");async function decompressSave(e,r){const n=await readFile(e);return new Promise(((e,t)=>{let a="";const o=n.byteLength;let i,s=0;do{const e=n.slice(s),r=new Uint32Array(e,0,4)[0],o=new Uint32Array(e,4,4)[0],i=new Uint32Array(e,8,4)[0];if(4276986341!==r)return void t(new Error("Invalid NMS Block, bad file"));const c=new Buffer.from(e.slice(16));let f=Buffer.alloc(i);LZ4.decodeBlock(c,f,0,o),f=f.subarray(0,i);a+=f.toString(),s+=16+o}while(s<o);try{i=JSON.parse(a)}catch{i=JSON.parse(a.slice(0,-1))}e(mapKeys(i,r))}))}
